#!/usr/bin/env python
#
# Copyright (C) 2013 Casey Link <unnamedrambler@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
Parse SPOT data feeds in JSON format and save them to a SQL database

Usage: spot-persist.py -h
"""
import argparse
import sys

from spotpersist import model
from spotpersist import parse_json
from spotpersist import sql

def _main():
    parser = argparse.ArgumentParser(description="Utility for parsing SPOT feeds in JSON format and saving them to a SQL database")
    parser.add_argument('file', nargs='+', help='The json data to parse', type=argparse.FileType('r'), default=sys.stdin)
    parser.add_argument('-n', '--database-name', help="The filename of the SQLite database (default: messages.db)", default='messages.db')
    parser.add_argument('-u', '--update', action='store_true', help="Insert new messages and update existing ones")
    args = parser.parse_args()

    all_msgs = []
    for f in args.file:
        try:
            metadata, messages = parse_json(f)
            for m in messages:
                if type(m) is dict:
                    all_msgs.append(m)
            print "%s: Parsing %s messages from feed %s (device: %s, id: %s)" % (f.name, len(messages), metadata['name'], metadata['name'], metadata['id'])
        except TypeError, e:
            print "%s did not contain any messages" % (f.name)
            print e

    sql.init_db('sqlite:///%s' % (args.database_name))
    all_msgs = {v['dateTime']:v for v in all_msgs}.values()
    sql.populate(all_msgs, args.update)

if __name__ == '__main__':
    _main()
